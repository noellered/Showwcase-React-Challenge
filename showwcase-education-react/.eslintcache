[{"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/reportWebVitals.ts":"1","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/App.tsx":"2","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/Home.tsx":"3","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/Main.tsx":"4","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/education/EducationSidebar.tsx":"5","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/education/EducationList.tsx":"6","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/index.tsx":"7","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/pickers/YearPicker.tsx":"8","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/pickers/MonthPicker.tsx":"9","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/education/EducationModalContent.tsx":"10"},{"size":425,"mtime":1608074315029,"results":"11","hashOfConfig":"12"},{"size":336,"mtime":1608075129876,"results":"13","hashOfConfig":"12"},{"size":724,"mtime":1608075299752,"results":"14","hashOfConfig":"12"},{"size":1467,"mtime":1608166047765,"results":"15","hashOfConfig":"12"},{"size":112,"mtime":1608079500292,"results":"16","hashOfConfig":"12"},{"size":103,"mtime":1608079518834,"results":"17","hashOfConfig":"12"},{"size":500,"mtime":1608074315029,"results":"18","hashOfConfig":"12"},{"size":1084,"mtime":1608165088398,"results":"19","hashOfConfig":"12"},{"size":1432,"mtime":1608165070278,"results":"20","hashOfConfig":"12"},{"size":5048,"mtime":1608165754482,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pqyfjb",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/reportWebVitals.ts",[],"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/App.tsx",[],"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/Home.tsx",[],["45","46"],"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/Main.tsx",[],"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/education/EducationSidebar.tsx",[],"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/education/EducationList.tsx",[],"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/index.tsx",[],"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/pickers/YearPicker.tsx",[],"/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/pickers/MonthPicker.tsx",["47"],"import React, { FunctionComponent, useState } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\ninterface MonthPickerProps {\n    label?: string;\n    id?: string;\n}\n\nconst months = [\n    { id: 0, name: 'January' },\n    { id: 1, name: 'February' },\n    { id: 2, name: 'March' },\n    { id: 3, name: 'April' },\n    { id: 4, name: 'May' },\n    { id: 5, name: 'June' },\n    { id: 6, name: 'July' },\n    { id: 7, name: 'August' },\n    { id: 8, name: 'September' },\n    { id: 9, name: 'October' },\n    { id: 10, name: 'November' },\n    { id: 11, name: 'December' },\n];\n\nconst MonthPicker:FunctionComponent<MonthPickerProps> = ({ label, id }) => {\n    const [month, setMonth] = useState(new Date().getMonth())\n\n   const handleChange = (e: any) => {\n        e.preventDefault();\n        setMonth(e.target.value);\n   }\n\n    return (\n        <div>\n            <FormControl>\n                <InputLabel>{label}</InputLabel>\n                <Select labelId={label} id={id} value={month} onChange={handleChange}>\n                { months.map((month) => <MenuItem value={month.id}>{month.name}</MenuItem>)}\n                </Select>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default MonthPicker;","/Users/thequeen/Documents/Coding/challenges/Showwcase-React-Challenge/showwcase-education-react/src/components/education/EducationModalContent.tsx",["48","49","50","51"],"import React, { useEffect, useState } from 'react';\nimport Autocomplete, { AutocompleteRenderGroupParams } from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { VariableSizeList, ListChildComponentProps } from 'react-window';\nimport MonthPicker from '../pickers/MonthPicker';\nimport YearPicker from '../pickers/YearPicker';\n\n//Virtualize institution list for more efficient rendering performance\n\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props: ListChildComponentProps) {\n  const { data, index, style } = props;\n  return React.cloneElement(data[index], {\n    style: {\n      ...style,\n      top: (style.top as number) + LISTBOX_PADDING,\n    },\n  });\n}\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data: any) {\n    const ref = React.useRef<VariableSizeList>(null);\n    React.useEffect(() => {\n      if (ref.current != null) {\n        ref.current.resetAfterIndex(0, true);\n      }\n    }, [data]);\n    return ref;\n  }\n  \n\n  // React-window adapter\n  const ListboxComponent = React.forwardRef<HTMLDivElement>(function ListboxComponent(props, ref) {\n    const { children, ...other } = props;\n    const theme = useTheme();\n    const itemData = React.Children.toArray(children);\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\n    const itemCount = itemData.length;\n    const itemSize = smUp ? 36 : 48;\n  \n    const getChildSize = (child: React.ReactNode) => {\n      if (React.isValidElement(child) && child.type === ListSubheader) {\n        return 48;\n      }\n  \n      return itemSize;\n    };\n  \n    const getHeight = () => {\n      if (itemCount > 8) {\n        return 8 * itemSize;\n      }\n      return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n    };\n  \n    const gridRef = useResetCache(itemCount);\n  \n    return (\n      <div ref={ref}>\n        <OuterElementContext.Provider value={other}>\n          <VariableSizeList\n            itemData={itemData}\n            height={getHeight() + 2 * LISTBOX_PADDING}\n            width=\"100%\"\n            ref={gridRef}\n            outerElementType={OuterElementType}\n            innerElementType=\"ul\"\n            itemSize={(index) => getChildSize(itemData[index])}\n            overscanCount={5}\n            itemCount={itemCount}\n          >\n            {renderRow}\n          </VariableSizeList>\n        </OuterElementContext.Provider>\n      </div>\n    );\n  });\n\n\n\n\n//Add Education Modal Content\nconst EducationModalContent = () => {\n    const [institutionList, setInstitutionList] = useState<string[]>([]);\n    \n    //Education Start Month/Year\n    const [start, setStart] = useState<{month: string, year: number}>({\n        month: '',\n        year: new Date().getFullYear()\n    });\n\n    //Education End Month/Year\n    const [end, setEnd] = useState({\n        month: '',\n        year: new Date().getFullYear()\n    });\n\n    const getInstitutions = () => {\n        fetch(`http://universities.hipolabs.com/search`)\n        .then((res: any) => res.json()\n        .then((JSON) => setInstitutionList(JSON.map((item)=>item['name']))));\n    }\n\n    // Get institutions list on component mount\n    useEffect( () => {\n        getInstitutions()\n    }, []);\n\n    const renderGroup = (params: AutocompleteRenderGroupParams) => [\n        <ListSubheader key={params.key} component=\"div\">\n          {params.group}\n        </ListSubheader>,\n        params.children,\n    ];\n\n    const handleSubmit = (e: any) => {\n        e.preventDefault();\n        //TODO \n        //set values to selected & save\n    }\n\n\n    return(\n        <div>\n            <h2>Add New Education</h2>\n            <form onSubmit={handleSubmit}>\n                <Autocomplete \n                id=\"institutions-list\" \n                options={institutionList} \n                freeSolo \n                renderGroup={renderGroup}\n                renderInput={(params)=>(\n                    <TextField {...params} label=\"Enter your institution\" margin=\"normal\" variant=\"outlined\" />\n                )}\n                renderOption={(option) => <p>{option}</p>}\n                ListboxComponent={ListboxComponent as React.ComponentType<React.HTMLAttributes<HTMLElement>>}\n                disableListWrap\n                autoSelect={true}\n                />\n                <div>\n                    <MonthPicker label=\"Start Month\" id=\"startMonth\"/>\n                    <MonthPicker label=\"End Month\" id=\"endMonth\"/>\n                    <YearPicker label=\"Start Year\" id=\"startYear\"/>\n                    <YearPicker label=\"End Year (or expected)\" id=\"endYear\"/>\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default EducationModalContent;",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":4,"column":8,"nodeType":"58","messageId":"59","endLine":4,"endColumn":22},{"ruleId":"56","severity":1,"message":"60","line":98,"column":12,"nodeType":"58","messageId":"59","endLine":98,"endColumn":17},{"ruleId":"56","severity":1,"message":"61","line":98,"column":19,"nodeType":"58","messageId":"59","endLine":98,"endColumn":27},{"ruleId":"56","severity":1,"message":"62","line":104,"column":12,"nodeType":"58","messageId":"59","endLine":104,"endColumn":15},{"ruleId":"56","severity":1,"message":"63","line":104,"column":17,"nodeType":"58","messageId":"59","endLine":104,"endColumn":23},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"@typescript-eslint/no-unused-vars","'FormHelperText' is defined but never used.","Identifier","unusedVar","'start' is assigned a value but never used.","'setStart' is assigned a value but never used.","'end' is assigned a value but never used.","'setEnd' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]